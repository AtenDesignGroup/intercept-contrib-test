<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\TypedData\DataDefinition;

/**
 * Implements hook_theme().
 */
function intercept_event_theme() {
  return [
    'event_attendance_scan_form' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_entity_extra_field_info().
 */
function intercept_event_entity_extra_field_info() {
  $extra = [];

  $extra['event_attendance']['event_attendance']['form']['event_summary'] = [
    'label' => t('Event summary'),
    'description' => t('View event summary information.'),
    'weight' => 10,
    'visible' => FALSE,
  ];

  return $extra;
}

/**
 * Implements hook_node_access().
 */
function intercept_event_node_access(\Drupal\node\NodeInterface $node, $op, \Drupal\Core\Session\AccountInterface $account) {
  if ($node->bundle() == 'event' && $op == 'scan') {
    return AccessResult::allowedIfHasPermission($account, 'scan event_attendance');
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_entity_field_access().
 */
function intercept_event_entity_field_access($operation, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, \Drupal\Core\Session\AccountInterface $account, \Drupal\Core\Field\FieldItemListInterface $items = NULL) {
  // Check if it's edit because 'view' might not have any items.
  if ($operation == 'edit') {
    if ($items->getEntity()->bundle() == 'event' && $field_definition->getName() == 'field_event_is_template') {
      return AccessResult::forbiddenIf(!$account->hasPermission('edit event field field_event_is_template'));
    }
    if ($items->getEntity()->bundle() == 'event' && $field_definition->getName() == 'field_featured') {
      return AccessResult::forbiddenIf(!$account->hasPermission('edit event field field_featured'));
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function intercept_event_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if ($form_state->getFormObject()->getEntity()->bundle() == 'event') {
    $form['#validate'][] = 'intercept_event_node_event_form_validate';
  }
}

/**
 * Implements hook_node_view().
 */
function intercept_event_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  $build['register_prompt'] = [
    '#markup' => '<div class="event-register-button js--event-register-button" data-uuid="' . $entity->uuid() . '" />',
    '#attached' => [
      'library' => ['intercept_event/eventRegisterButton'],
    ]
  ];
}

/**
 * Custom form validation for the event node form.
 *
 * @see intercept_event_form_node_form_alter()
 */
function intercept_event_node_event_form_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $values = $form_state->getValues();
  $must_register = $values['field_must_register']['value'];
  $dates_event = $values['field_date_time'][0];
  $dates_registration = $values['field_event_register_period'][0];
  if ($must_register) {
    $dates_registration = $form_state->getValue('field_event_register_period')[0];
    if (empty($dates_registration['value']) || empty($dates_registration['end_value'])) {
      $form_state->setErrorByName('field_event_register_period', t('Registration period is required.'));
    }
  }
  if (!empty($dates_registration['value']) && !empty($dates_event['value'])) {
    if (!$dates_event['value']->diff($dates_registration['value'])->invert) {
      $form_state->setErrorByName('field_date_time', t('Registration start date must be before the event start date.'));
    }
  }
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function intercept_event_entity_bundle_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  $fields = [];
  if ($entity_type->id() == 'node' && $bundle == 'event') {
    $fields['registration'] = \Drupal\Core\Field\BaseFieldDefinition::create('intercept_computed')
      ->setLabel(t('Registration details'))
      ->setComputed(TRUE)
      ->setSetting('properties', [
        'total' => DataDefinition::create('integer')->setLabel(t('Total registrations')),
        'total_waitlist' => DataDefinition::create('integer')->setLabel(t('Total waitlisted')),
        'status' => DataDefinition::create('string')->setLabel(t('Status')),
        'status_user' => DataDefinition::create('string')->setLabel(t('Status for current user')),
      ])
      ->setClass(\Drupal\intercept_event\EventRegistrationField::class);

  }
  return $fields;

}
